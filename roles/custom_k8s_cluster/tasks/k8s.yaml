---

- name: Check if api_token is already present (rke_rancher_clusters was run before)
  set_fact:
    custom_k8s_cluster_api_key: "{{ hostvars['RANCHER_TOKEN_HOLDER']['api_token'] }}"
  when:
  - hostvars['RANCHER_TOKEN_HOLDER'] is defined
  - hostvars['RANCHER_TOKEN_HOLDER']['api_token'] is defined
  - (hostvars['RANCHER_TOKEN_HOLDER']['api_token'] | length) > 0
  - (custom_k8s_cluster_api_key | length) == 0

- name: Get all Cluster from Rancher Control Plane
  uri:
    url: "{{ custom_k8s_cluster_rancher_api }}/clusters"
    validate_certs: "{{ custom_k8s_cluster_verify_ssl }}"
    return_content: yes
    headers:
      Authorization: "Bearer {{ custom_k8s_cluster_api_key }}"
  register: rancher_cluster
  check_mode: no

- name: Set Fact for current cluster
  set_fact:
    cluster: "{{ rancher_cluster | json_query(\"json.data[?name == '\" + custom_k8s_cluster_name + \"']\") }}"
  check_mode: no

#- name: Set Fact for current cluster version, if it already exists
#  delegate_to: localhost
#  set_fact:
#    cluster_networkpolicy: "{{ cluster[0]['enableNetworkPolicy'] }}"
#    cluster_version: "{{ cluster[0]['rancherKubernetesEngineConfig']['kubernetesVersion'] }}"
#    cluster_ingress: "{{ cluster[0]['rancherKubernetesEngineConfig']['ingress']['provider'] }}"
#    cluster_psp_template: "{{ cluster[0]['defaultPodSecurityPolicyTemplateId'] }}"
#    cluster_id: "{{ cluster[0]['id'] }}"
#  check_mode: no
#  when:
#  - (cluster | length) > 0
#
#- name: Print cluster facts from the Rancher API
#  debug:
#    msg:
#      - "Currently applied cluster version: {{ cluster_version | lower }}"
#      - "  -> Cluster version configuration: {{ custom_k8s_cluster_kubernetes_version | lower }}"
#      - "Currently applied cluster networkpolicy configuration: {{ cluster_networkpolicy | lower }}"
#      - "  -> Cluster networkpolicy configuration: {{ custom_k8s_cluster_enable_network_policy | lower }}"
#      - "Currently applied cluster ingress controller: {{ cluster_ingress | lower }}"
#      - "  -> Cluster ingress controller configuration: {{ custom_k8s_clusters_ingress_provider | lower }}"
#      - "Currently applied cluster PSP template: {{ cluster_psp_template | lower }}"
#      - "  -> Cluster PSP template configuration: {{ custom_k8s_clusters_default_psp | lower }}"
#  when:
#    - (cluster | length) > 0

- name: Cluster does not exist, create new Cluster
  uri:
    url: "{{ custom_k8s_cluster_rancher_api_v1 }}/provisioning.cattle.io.clusters"
    validate_certs: "{{ custom_k8s_cluster_verify_ssl }}"
    return_content: yes
    headers:
      Authorization: "Bearer {{ custom_k8s_cluster_api_key }}"
    body: "{{ lookup('template','cluster.json.j2') | regex_replace('\n',' ') }}"
    body_format: json
    status_code: 201
    method: POST
  register: cluster_new
  when:
    - (cluster | length) == 0


#- name: Cluster does exist, check if update is requested
#  uri:
#    url: "{{ custom_k8s_cluster_rancher_api }}/clusters/{{ cluster[0].id }}"
#    validate_certs: "{{ custom_k8s_cluster_verify_ssl }}"
#    return_content: yes
#    headers:
#      Authorization: "Bearer {{ custom_k8s_cluster_api_key }}"
#    body: "{{ lookup('template','cluster.json.j2') | regex_replace('\n',' ') }}"
#    body_format: json
#    status_code: 200
#    method: PUT
#  when: |
#      ((cluster | length) > 0)

#- name: Set fact if existing cluster
#  set_fact:
#    cluster: "{{ cluster[0] }}"
#  when:
#    - (cluster | length) > 0

- name: Set fact if new cluster
  set_fact:
    cluster: "{{ cluster_new.json }}"
  when:
    - cluster_new is not skipped

- name: Get cluster list
  uri:
    url: "{{ custom_k8s_cluster_rancher_api }}/clusters"
    validate_certs: "{{ custom_k8s_cluster_verify_ssl }}"
    return_content: yes
    headers:
      Authorization: "Bearer {{ custom_k8s_cluster_api_key }}"
  register: clusterlistraw
  check_mode: no
  

- name: clusterlistraw
  set_fact:
    clusterlist: "{{ clusterlistraw.json }}"
  
  
- name: Extract cluster id
  set_fact:
    clusterid: "{{ clusterlist.data | json_query(\"[?name== '\" + custom_k8s_cluster_name + \"' ].id\") | first }}"
  
- name: Get Cluster Registration Token
  uri:
    url: "{{ custom_k8s_cluster_rancher_api }}/clusterregistrationtoken?id={{ clusterid }}"
    validate_certs: "{{ custom_k8s_cluster_verify_ssl }}"
    return_content: yes
    headers:
      Authorization: "Bearer {{ custom_k8s_cluster_api_key }}"
  register: clusterregistrationtoken
  check_mode: no

- name: Filter for correct clusterRegistrationToken
  set_fact:
    clusterregistrationtoken: "{{ clusterregistrationtoken | json_query(\"json.data[?clusterId == '\" + clusterid + \"']\") }}"

- name: Create cluster registration token when not already exists
  uri:
    url: "{{ custom_k8s_cluster_rancher_api }}/clusterregistrationtoken"
    validate_certs: "{{ custom_k8s_cluster_verify_ssl }}"
    return_content: yes
    headers:
      Authorization: "Bearer {{ custom_k8s_cluster_api_key }}"
    body:
      type: "clusterRegistrationToken"
      clusterId: "{{ clusterid }}"
    body_format: json
    status_code: 201
    method: POST
  register: newclusterRegistrationToken
  when:
    - ( clusterregistrationtoken | length ) == 0

- name: Set cluster registration token if new token
  set_fact:
    clusterregistrationtoken: "{{ newclusterRegistrationToken.json.token }}"
  when:
    - newclusterRegistrationToken is not skipped

- name: Set cluster registration token if existing token
  set_fact:
    clusterregistrationtoken: "{{ clusterregistrationtoken[0].token }}"
  when:
    - newclusterRegistrationToken is skipped
    - ( clusterregistrationtoken | length ) > 0

- name: Get CA checksum
  uri:
    url: "{{ custom_k8s_cluster_rancher_api }}/clusterregistrationtoken?id={{ clusterid }}"
    validate_certs: "{{ custom_k8s_cluster_verify_ssl }}"
    return_content: yes
    headers:
      Authorization: "Bearer {{ custom_k8s_cluster_api_key }}"
  register: clusternodecommand
  check_mode: no
  #when:
  #  - custom_k8s_cluster_self_signed_certificate

- name: Filter for correct cluster clusterNodeCommand
  set_fact:
    clusternodecommand: "{{ clusternodecommand | json_query(\"json.data[?clusterId == '\" + clusterid + \"']\") }}"
  #when:
  #  - custom_k8s_cluster_self_signed_certificate

- name: Set cluster node command
  set_fact:
    clusternodecommand: "{{ clusternodecommand[0].nodeCommand }}"
  #when:
  #  - custom_k8s_cluster_self_signed_certificate

- name: Cluster node command
  debug:
    msg: "{{ clusternodecommand }}"
  when: ( clusternodecommand | length ) > 0


- name: Save output to a file on the control machine
  copy:
    content: "{{ clusternodecommand }}"
    dest: /tmp/clusternodecommand.txt
  when : ( clusternodecommand | length ) > 0


- name: Save clusterid to a file on the control machine
  copy:
    content: "{{ clusterid }}"
    dest: /tmp/clusterid.txt
  when : ( clusterid | length ) > 0
#- name: Parse cluster ca-checksum
#  set_fact:
#    clustercachecksum: "{{ clusternodecommand | regex_search(custom_k8s_cluster_ca_checksum_param | string + '(\\s+)' +'(.*)', '\\2') | first }}"
#  when:
#    - custom_k8s_cluster_self_signed_certificate
#
#- name: Parsed ca-checksum from cluster
#  debug:
#    msg: "{{ clustercachecksum }}"
#  when:
#    - custom_k8s_cluster_self_signed_certificate